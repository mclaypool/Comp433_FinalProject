/******************************************************************************
* Class:	CustomerDao
* Purpose:	
*******************************************************************************
* Style:		https://google.github.io/styleguide/javaguide.html
* Column limit: 80
******************************************************************************/
package com.customer;
import org.hibernate.Session;
import misc.SessionFactoryUtil;

public class CustomerDao{

	/**************************************************************************
	* global variables
	**************************************************************************/
	private static Session session;
	
	
	/**************************************************************************
	* constructor
	**************************************************************************/	
	public CustomerDao()
	{
		session = SessionFactoryUtil.getSessionFactory().getCurrentSession();
        session.beginTransaction();
	}
	
	
	/**************************************************************************
	* methods
	**************************************************************************/
	public CustomerRepresentation createCustomer(CustomerRequest request)
	{
		//declare variables
		CustomerRepresentation representation = new CustomerRepresentation();
		int id;
		
		//save request
		id = (int) session.save(request);
		
		//get representation
        representation = (CustomerRepresentation)session.get(Customer.class, id);
        return representation;
	}
	
	/*
	public CustomerRepresentation getCustomer(CustomerRequest request)
	{
		//declare variables
		CustomerRepresentation representation = new CustomerRepresentation();
        
        representation = 
        		(CustomerRepresentation)session.get(Customer.class, request.getEmail());
        session.close();

        return representation;
	}
	
	public CustomerRepresentation updateCustomer(CustomerRequest request)
	{
		Session session = sessionFactory.openSession();
        session.beginTransaction();
        session.update(request);
        session.getTransaction().commit();
        session.close();
        return null;
	}
	
	public CustomerRepresentation deleteCustomer(CustomerRequest request)
	{
		Session session = sessionFactory.openSession();
        session.beginTransaction();
        session.delete(request);
        session.getTransaction().commit();
        session.close();
        return null;
	}*/
}
